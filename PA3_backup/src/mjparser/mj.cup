
package mjparser;
import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;

import ast.node.*;

parser code {:

    public PrintWriter out; 
    
    public String programName;

    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        //System.out.println("cur_SymbolValue: "+ cur_SymbolValue.value);
		report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol sym = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)sym.value;
        throw new mjparser.ParseException("Fatal parsing error", 
                                          tok.line, tok.pos);
    }
    
    public void report_error(String message, Object info) {
        Symbol sym = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)sym.value;
		System.out.println("sym null? "+(sym == null));
		System.out.println("sym.sym: "+sym.sym);
		System.err.println("tok null? "+ (tok == null));
		System.err.println("tok.lexeme: "+ tok.lexeme);
        System.err.println("[" + tok.line + "," + tok.pos + "] "); 
                              System.err.println( message + " at " + tok.toString() );
    }
            
:}

/* Notice: all terminals declared here */
terminal SymbolValue PLUS, MINUS, TIMES, LPAREN, RPAREN;
terminal SymbolValue LBRACE, RBRACE;
terminal SymbolValue BOOLEAN, INT;
terminal SymbolValue BYTE;
terminal SymbolValue MAIN, IMPORT;
terminal SymbolValue IF, ELSE;
terminal SymbolValue LT;
terminal SymbolValue EQUAL;
terminal SymbolValue AND, NOT;
terminal SymbolValue WHILE;
terminal SymbolValue COMMA, DOT;
terminal SymbolValue NEW, PUBLIC, RETURN, STATIC;
terminal SymbolValue STRING, VOID;
terminal SymbolValue CLASS, EXTENDS;
terminal SymbolValue LBRACKET, RBRACKET;
terminal SymbolValue LENGTH;
terminal SymbolValue SEMI;
terminal SymbolValue ASSIGN;

terminal SymbolValue MEGGY;
terminal SymbolValue MEGGYCOLOR;
terminal SymbolValue MEGGYBUTTON;
terminal SymbolValue MEGGYTONE;
terminal SymbolValue MEGGYSETPIXEL;
terminal SymbolValue MEGGYSETAUXLEDS;
terminal SymbolValue MEGGYTONESTART;
terminal SymbolValue MEGGYDELAY;
terminal SymbolValue MEGGYGETPIXEL;
terminal SymbolValue MEGGYCHECKBUTTON;

terminal SymbolValue INT_LITERAL, ID;
terminal SymbolValue TRUE, FALSE;
terminal SymbolValue COLOR_LITERAL, BUTTON_LITERAL, TONE_LITERAL;
terminal SymbolValue THIS;
terminal SymbolValue COMMENT;

/* bogus terminal for unary precedence declaration */
terminal UMINUS;

non terminal Program program;
non terminal IExp exp;
non terminal IStatement statement;
non terminal List<IStatement> statement_list;
non terminal MainClass main_class;

/* Declare precedence and associativity  here */
precedence left TIMES;
precedence right UMINUS;


/* Meggy Java Grammar */
start with program;

program ::= 
	 IMPORT:i MEGGY SEMI main_class:m
	{:
		RESULT = new Program(i.line, i.pos, m, null);
	:}
    | COMMENT program 
	;
    
main_class ::=
    CLASS:c ID:name
    LBRACE PUBLIC STATIC VOID MAIN 
    LPAREN STRING LBRACKET RBRACKET ID:param RPAREN
    LBRACE:l 
    statement_list:list RBRACE
    RBRACE
		{:
			//IdLiteral nameIdLiteral = new IdLiteral(name.line, name.pos, name.lexeme);			
			//IdLiteral paramIdLiteral = new IdLiteral(param.line, param.pos, param.lexeme);
			//BlockStatement blockStatement = new BlockStatement(list.line, list.pos, list);
			BlockStatement blockStatement = new BlockStatement(l.line, l.pos, list);
			MainClass _mainClass_ = new MainClass(c.line, c.pos, name.lexeme, param.lexeme, blockStatement);
			RESULT = _mainClass_; 
		:}
    ;

statement_list ::=
	statement_list:sl statement:s
		{:
			sl.add(s);
			RESULT = sl;
		:}
	|	/* Empty */
		{:
			RESULT = new LinkedList<IStatement>();
		:}
	;

statement ::=
	MEGGYSETPIXEL:msp LPAREN 
	exp:e1 COMMA 
	exp:e2 COMMA 
	exp:e3 
	RPAREN SEMI
	{:
		RESULT = new MeggySetPixel(msp.line, msp.pos, e1, e2, e3);
	:}
	| COMMENT 
	;

exp ::=
	LPAREN BYTE RPAREN exp:e 
	{:	
		//IntLiteral intLiteral = new IntLiteral(e.getLine(), e.getPos(), e.lexeme, e.value);
		//IExp iExp = new IExp(e.line, e.pos);
		RESULT = new ByteCast(e.getLine(), e.getPos(), (IntLiteral)e);
	:}
	| INT_LITERAL:i
	{:
		RESULT = new IntLiteral(i.line, i.pos, i.lexeme, i.value);
		//RESULT = new IntLiteral(i.getLine(), i.getPos(), i.lexeme, i.value);
	:}
	| COLOR_LITERAL:c
	{:
		RESULT = new ColorLiteral(c.line, c.pos, c.lexeme, c.value);
	:}
	;
